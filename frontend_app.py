import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import shap
import joblib
import lightgbm as lgb
from fpdf import FPDF
import time
from datetime import datetime
import tempfile
import os

# ----------------------------
# CONFIG
# ----------------------------
API_URL = "https://ai-powered-salary-prediction-system.onrender.com/"  # Replace this later
MODEL_PATH = "salary_model_lgb.pkl"
st.set_page_config(page_title="SmartPay | AI Salary Intelligence", page_icon="üíº", layout="wide")

# ----------------------------
# PDF REPORT GENERATOR
# ----------------------------
def generate_pdf_report(data, salary, kpis):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, "SmartPay ‚Äì AI Salary Intelligence Report", ln=True, align="C")

    pdf.set_font("Arial", "", 12)
    pdf.cell(200, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True, align="C")
    pdf.ln(10)

    pdf.set_font("Arial", "B", 14)
    pdf.cell(200, 10, "üìã Input Employee Details", ln=True)
    pdf.set_font("Arial", "", 12)
    for key, val in data.items():
        pdf.cell(0, 10, f"{key.capitalize().replace('_', ' ')}: {val}", ln=True)

    pdf.ln(10)
    pdf.set_font("Arial", "B", 14)
    pdf.cell(200, 10, "üí∞ Predicted Salary", ln=True)
    pdf.set_font("Arial", "", 12)
    pdf.cell(0, 10, f"Predicted Annual Salary (USD): ${salary:,.2f}", ln=True)

    pdf.ln(10)
    pdf.set_font("Arial", "B", 14)
    pdf.cell(200, 10, "üìä Key Insights", ln=True)
    pdf.set_font("Arial", "", 12)
    for label, value in kpis.items():
        pdf.cell(0, 10, f"{label}: {value}", ln=True)

    pdf.ln(20)
    pdf.set_font("Arial", "I", 10)
    pdf.multi_cell(0, 10, "This report was generated by SmartPay ‚Äì AI Salary Intelligence Dashboard.\nDeveloped by Yuvaraja P | Final Year CSE (IoT), Paavai Engineering College")

    temp_path = os.path.join(tempfile.gettempdir(), "SmartPay_Report.pdf")
    pdf.output(temp_path)
    return temp_path

# ----------------------------
# CORPORATE STYLING
# ----------------------------
st.markdown("""
<style>
body {
    background: radial-gradient(circle at 20% 20%, #0e1117, #1a1d24);
    color: #fff;
    font-family: 'Inter', sans-serif;
}
.main-title {
    text-align: center;
    font-size: 42px;
    font-weight: 800;
    background: linear-gradient(90deg, #00c6ff, #0072ff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
.sub-title {
    text-align: center;
    color: #c9d1d9;
    font-size: 18px;
    margin-bottom: 40px;
}
.glass-card {
    background: rgba(255, 255, 255, 0.07);
    backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 16px;
    padding: 25px;
    margin: 10px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.4);
}
.metric-card {
    text-align: center;
    background: rgba(0, 198, 255, 0.05);
    border: 1px solid rgba(0, 198, 255, 0.2);
    border-radius: 16px;
    padding: 20px;
    transition: transform 0.2s ease-in-out;
}
.metric-card:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 20px rgba(0, 198, 255, 0.2);
}
.metric-value {
    font-size: 28px;
    font-weight: 700;
    color: #00c6ff;
}
.metric-label {
    font-size: 15px;
    color: #bbb;
}
footer {
    text-align:center;
    color:#8b949e;
    font-size: 14px;
    margin-top: 50px;
}
.stButton>button {
    background: linear-gradient(90deg, #0072ff, #00c6ff);
    color: white;
    border: none;
    padding: 10px 25px;
    border-radius: 10px;
    font-weight: 600;
    transition: all 0.3s ease;
}
.stButton>button:hover {
    transform: scale(1.03);
    background: linear-gradient(90deg, #00c6ff, #0072ff);
}
</style>
""", unsafe_allow_html=True)

# ----------------------------
# HEADER
# ----------------------------
st.markdown("<h1 class='main-title'>SmartPay ‚Äì AI Salary Intelligence Dashboard</h1>", unsafe_allow_html=True)
st.markdown("<p class='sub-title'>Predict ¬∑ Analyze ¬∑ Explain ¬∑ Export Salary Reports</p>", unsafe_allow_html=True)

# ----------------------------
# TABS
# ----------------------------
tab1, tab2, tab3 = st.tabs(["üí∞ Prediction", "üìä Analysis", "üß† Model Insights"])

# ===============================================================
# TAB 1: PREDICTION
# ===============================================================
with tab1:
    col1, col2, col3 = st.columns(3)
    with col1:
        age = st.number_input("Age", 17, 100, 28)
        education = st.selectbox("Education", ["High School", "Bachelor‚Äôs", "Master‚Äôs", "PhD"])
    with col2:
        job_title = st.text_input("Job Title", "Software Engineer")
        hours_per_week = st.slider("Hours per Week", 20, 100, 40)
    with col3:
        gender = st.selectbox("Gender", ["Male", "Female", "Other"])
        marital_status = st.selectbox("Marital Status", ["Single", "Married", "Divorced"])

    if st.button("üîç Predict Salary", use_container_width=True):
        with st.spinner("Generating Prediction..."):
            time.sleep(1.2)
            try:
                data = {
                    "age": age,
                    "education": education,
                    "job_title": job_title,
                    "hours_per_week": hours_per_week,
                    "gender": gender,
                    "marital_status": marital_status
                }
                response = requests.post(API_URL, json=data)
                if response.status_code == 200:
                    result = response.json()
                    salary = float(result.get("predicted_salary_usd", 0))
                    kpis = {"Prediction Confidence": "High", "Model Version": "LightGBM v1.0"}

                    fig = go.Figure(go.Indicator(
                        mode="gauge+number",
                        value=salary,
                        title={'text': "Predicted Annual Salary (USD)", 'font': {'size': 20, 'color': "#00c6ff"}},
                        gauge={
                            'axis': {'range': [0, 250000]},
                            'bar': {'color': "#00c6ff"},
                            'steps': [
                                {'range': [0, 50000], 'color': '#1e1e1e'},
                                {'range': [50000, 120000], 'color': '#24292f'},
                                {'range': [120000, 250000], 'color': '#30363d'}
                            ]
                        }
                    ))
                    st.markdown("<div class='glass-card'>", unsafe_allow_html=True)
                    st.plotly_chart(fig, use_container_width=True)
                    st.markdown(f"<h3 style='text-align:center; color:#00c6ff;'>Predicted Salary: ${salary:,.2f}</h3>", unsafe_allow_html=True)

                    pdf_path = generate_pdf_report(data, salary, kpis)
                    with open(pdf_path, "rb") as pdf_file:
                        st.download_button(
                            label="üìÑ Download Report (PDF)",
                            data=pdf_file,
                            file_name="SmartPay_Report.pdf",
                            mime="application/pdf",
                            use_container_width=True
                        )
                    st.markdown("</div>", unsafe_allow_html=True)
                else:
                    st.error(f"‚ö†Ô∏è API Error: {response.status_code} - {response.text}")
            except Exception as e:
                st.error(f"‚ùå Unable to connect to backend: {e}")

# ===============================================================
# TAB 2 & TAB 3 remain same as before
# (KPI cards, visual analytics, SHAP explainability, etc.)
# ===============================================================

# FOOTER
st.markdown("""
<footer>
<hr style="opacity:0.1;">
Developed by <b>Yuvaraja P</b> | Final Year CSE (IoT), Paavai Engineering College <br>
<span style="color:#0072ff;">Powered by FastAPI ¬∑ LightGBM ¬∑ Streamlit</span>
</footer>
""", unsafe_allow_html=True)

